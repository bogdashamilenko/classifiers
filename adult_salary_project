df <- read.csv('adult_sal.csv')
df1 <- read.csv('adult_sal.csv')

library(dplyr)
library(ggplot2)
library(Amelia)
library(MASS)
library(forcats) 
library(forcats) 
library(plotly)
library(gtable)
library(caTools)

df <- dplyr::select(df,-X)
#str(df)
#summary(df)
table(df$type_employer)

#Let`s gather a few small factors in bigger groups
#First way to do this 
df$type_employer <- df$type_employer %>% 
  fct_collapse(Unemployed = c('Never-worked','Without-pay'))

#Second way through creating a custom function
merg.empl <- function(job){
  job <- as.character(job)
  if ( job == 'Never-worked'|job == 'Without-pay' ){
    return('Unemployed')
  }else{
    return(job)
  }
}

types <- sapply(df$type_employer,merg.empl)
df$type_employer <- as.factor(types)

df$type_employer <- df$type_employer %>% 
  fct_collapse(SelfEmp = c('Self-emp-inc','Self-emp-not-inc'))

df$type_employer <- df$type_employer %>% 
  fct_collapse(GovEmp = c('State-gov','Local-gov'))

#Still working with reducing factors in other Column...
df$marital <- df$marital %>% 
  fct_collapse(Married = c('Married-AF-spouse', 'Married-civ-spouse','Married-spouse-absent'))
df$marital <- df$marital %>% 
  fct_collapse(NotMarried = c('Divorced', 'Separated', 'Widowed'))
  
#Let`s work with countries and assign factors by continent 
df$country <- df$country %>% 
  fct_collapse(Asia = c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
                        'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand'))
df$country <- df$country %>% 
  fct_collapse(Other = c('South'))
df$country <- df$country %>% 
  fct_collapse(Europe = c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
                        'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia'))
df$country <- df$country %>% 
  fct_collapse(North.America = c('Canada','United-States','Puerto-Rico' ))

df$country <- df$country %>% 
  fct_collapse(Latin.South.America = c('Columbia','Cuba','Dominican-Republic','Ecuador',
                                            'El-Salvador','Guatemala','Haiti','Honduras',
                                            'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
                                            'Jamaica','Trinadad&Tobago') )

#OR WE CAN DO THROUGH THE CUSTOM FUNCTION
Asia <- c('China','Hong','India','Iran','Cambodia','Japan', 'Laos' ,
          'Philippines' ,'Vietnam' ,'Taiwan', 'Thailand')

North.America <- c('Canada','United-States','Puerto-Rico' )

Europe <- c('England' ,'France', 'Germany' ,'Greece','Holand-Netherlands','Hungary',
            'Ireland','Italy','Poland','Portugal','Scotland','Yugoslavia')

Latin.and.South.America <- c('Columbia','Cuba','Dominican-Republic','Ecuador',
                             'El-Salvador','Guatemala','Haiti','Honduras',
                             'Mexico','Nicaragua','Outlying-US(Guam-USVI-etc)','Peru',
                            'Jamaica','Trinadad&Tobago')
Other <- c('South')

group_country <- function(ctry){
    if (ctry %in% Asia){
        return('Asia')
    }else if (ctry %in% North.America){
        return('North.America')
    }else if (ctry %in% Europe){
        return('Europe')
    }else if (ctry %in% Latin.and.South.America){
        return('Latin.and.South.America')
    }else{
        return('Other')      
    }
}
df$country <- sapply(df$country,group_country)

# Some values contain '?' so let`s convert them to NA
#Step 1 for Occupation
conv.na <- function (occupation){
  occupation <- as.character(occupation)
  if (occupation == '?' |occupation == ' ?'){
    return (NA)
  }else {
    return(occupation)
  }
  }
df$occupation <- sapply(df$occupation,conv.na)
df$occupation <- as.factor(df$occupation)

#Step 2 for type of employement
df$type_employer <- sapply(df$type_employer,conv.na)
df$type_employer <- as.factor(df$type_employer)
pl <- missmap(df, col = c('black','red'))
#We miss only 1% of our data and it is impossible to assign the occupation or
#type of employer even approximately, so let`s omit NA values 
df <- na.omit(df)
miss.pl2 <- missmap(df, col = c('black','red'))
#No NA values so we may continue with:
#Exploratory Data Analysis

#Basic interacive graph  
pl <- ggplot(df, aes(age)) + 
   geom_histogram(aes(fill = income),color= 'black',binwidth = 1,show.legend = T,size = 0.15)+
   theme_gray()+ labs( title = 'Comparison of salary by the age')+ 
   scale_x_continuous(breaks = seq(0,88,by=4))
pl2<- ggplotly(pl)
pl3 <- ggplot(df,aes(hr_per_week))+geom_histogram(binwidth= 4)+
        scale_x_continuous(breaks = seq(0,100,by=4))
colnames(df)[colnames(df)=='country'] <- 'region'
pl4 <- ggplot(df,aes(x=region)) + stat_count(aes(fill=income),alpha= 0.6,color='black')+theme_grey()+
        theme(axis.text.x = element_text(angle = 90)) + coord_flip() + 
        scale_y_continuous(breaks = seq(0,40000,4000)) + xlab('Name of Region')

#Next step is building a logit model
#Splitting the data version #1
set.seed(123)
smp_size <- floor(0.8 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind,]
test <- df[-train_ind,]

#Splitting the data version #2
set.seed(123)
sample = sample.split(df, SplitRatio = 0.8)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)

#Bilding a Logistic Regression
glm.fit <- glm(income ~.,train,family= binomial(logit))
new.glm <- step(glm.fit)
test$predicted <- predict(glm.fit,newdata = test, type = 'response')
table(test$income,test$predicted>0.5)
Accuracy.Glm <- round((4229+952)/(6144),4)
Sensitivity.Glm <- round(952/(952+631),4)
Specificity.Glm <- round(4229/(4229+332),4)
#Perfoming a Linear Quadratic Analysis
lda.fit <- lda(income~.,train,family=binomial(logit))
lda.predict <- predict(lda.fit,test,type='response')
lda.class <- lda.predict$class
table(lda.class,test$income)
Accuracy.Lda <- round((4208+880)/(6144),4)
#Another optional way to calculate Accuracy 
#Accuracy2 <- 1 - mean(lda.class != test$income)
Sensitivity.Lda <- round(880/(880+353),4)
Specificity.Lda <- round(4208/(4208+703),4)

#qda.fit <- qda(income~.,train)
#Error in qda.default(x, grouping, ...) : rank deficiency in group <=50K
#This means that this data cannot be trained applying this classifier

#test1 <- test %>% dplyr::select(-predicted)
#knn.predict <- knn(train,test1,train.income,k=1)
#Error in knn(train, test1, train.income, k = 1) : NA/NaN/Inf in foreign function call (arg 6)

#Creating a table that gathers all main measures of our models
Glm.Model <- c(Accuracy.Glm,Sensitivity.Glm,Specificity.Glm)
Lda.Model <- c(Accuracy.Lda,Sensitivity.Lda,Specificity.Lda)
results <- data.frame(row.names=c('Accuracy','Sensitivity','Specificity'), Glm.Model, Lda.Model)


library(ISLR)
library(ggplot2)
any(is.na(df))
df<- Caravan
purachse <- df$Purchase

#Standartizing a date by scale()
standartized.df <- scale(df[,-86])
#print(var(standartized.df[,1]))
#print(var(standartized.df[,2]))

#train test split
test.index <- 1:1000
test.data <- standartized.df[test.index,]
test.purchase <- purachse[test.index]

train.data <- standartized.df[-test.index,]
train.purchase <- purachse[-test.index]

#moving to knn 
library(class)
set.seed(101)
predicted.purchase <- knn(train.data,test.data,train.purchase,k=5)
#knn(training data without label, test data without label, training outputs, set k)
print(head(predicted.purchase))

misclass.error <- mean(test.purchase != predicted.purchase)
print(misclass.error)

#choosing k value

predicted.purchase <- NULL
error.rate <- NULL 

for (i in 1:20){
  set.seed(101)
  predicted.purchase<- knn(train.data,test.data,train.purchase,k=i)
  error.rate[i] <- mean(test.purchase != predicted.purchase)
}
print(error.rate)
Value.of.k <- 1:20
results.error <- data.frame(Value.of.k,error.rate*100)

#Visualizing k-eys
#Three different designs of graphs 
library(ggrepel)
pl <- ggplot(results.error, aes(Value.of.k,error.rate)) + geom_line(color='red')+ 
      geom_point() + scale_x_continuous(breaks = seq(1,20,1))+
      geom_label_repel(aes(label=results.error$error.rate...100), 
                  fill = 'black', color='yellow',vjust= -1, fontface = 8, size = 4)
pl2 <- ggplot(results.error, aes(Value.of.k,error.rate)) + geom_line(color='red')+ 
        geom_point() + scale_x_continuous(breaks = seq(1,20,1))+
        geom_label(label=results.error$error.rate...100, 
                   vjust= -1, fontface = 8, size = 4)
pl3 <- ggplot(results.error, aes(Value.of.k,error.rate)) + geom_line(color='red')+ 
        geom_point() + scale_x_continuous(breaks = seq(1,20,1))+
        geom_text(label=results.error$error.rate...100, vjust= -1)
#As it can be seen from plots the minimum error rate is 5.8 with k=9,
#though the purchase rate is 5.98, so our model performs a bit better than 
#just random assigning of 5.98% of the future data to 'Yes' in Purchase column

